#정보시스템 구축 관리

소프트웨어 개발 방법론
1. 구조적 방법론 : 정형화된 분석 절차에 따라 사용자의 요구사항을 파악하여 문서화하는 처리중심의 방법론
타당성 검토 -> 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수 단계

2. 정보공학 방법론 : 정보시스템의 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게 통합 및 적용하는 자료 중심의 방법론 -> 대규모 정보 시스템 구축에 적합하다.

3. 객체지향 방법론: 개체(Entity)를 기계의 부품처럼 하나의 객체(Object)로 만들어, 소프트웨어를 개발할 때 기계의 부품을 조립하듯이 객체들을 조립해서 필요한 소프트웨어를 구현하는 방법론.
구성 요소 : 객체, 클래스, 메시지, 메서드 등이고 기본 원칙은 캡슐화, 상속성, 추상화, 정보 은닉, 다형성 이다.0

4. 컴포넌트 기반 방법론 : 기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 어플리케이션을 만드는 방법론
컴포넌트 및 소프트웨어의 재사용이 가능하여 시간과 노력 절감. -> 생산성 향상, 확장성 (새로운 기능 추가가 쉬운)

5. 애자일 방법론 : 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론
ex) XP, 스크럼, 칸반, 크리스탈 등

6. 제품 계열 방법론 : 특정 제품에 적응하고 싶은 공통된 기능을 정의하여 개발하는 방법론

소프트웨어 비용 산정 기법
소프트웨어의 개발 규모를 소요되는 인원, 자원, 기간 등으로 확인하여 실행 가능한 계획을 수립하기 위해 필요한 비용을 산정하는 것.
ex) 하향식 비용 산정 기법, 상향식 비용 산정 기법

비용 결정 요소
프로젝트 요소
1. 제품 복잡도 : 소프트웨어의 종류에 따라 발생할 수 있는 문제점들의 난이도를 의미함.
2. 시스템 크기 : 소프트웨어의 규모에 따라 개발해야 할 시스템의 크기를 의미함.
3. 요구되는 신뢰도 : 일정 기간 내 주어진 조건하에서 프로그램이 필요한 기능을 수행하는 정도를 의미함.

자원 요소
1. 인적 자원
2. 하드웨어 자원
3. 소프트웨어 자원

생산성 요소
1. 개발자 능력
2. 개발 기간

하향식 비용 산정 기법
과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정하는 비 과학적인 방법
ex) 전문가 감정 기법, 델파이 기법
전문가 감정 기법 : 조직 내에 있는 경험이 많은 두 명 이상의 전문가에게 비용 산정을 의뢰하는 기법, 개인적이고 주관적일 수 있다.
델파이 기법 : 전문가 감정 기법의 주관적인 편견을 보완하기 위해 한명의 조정자와 여러 전문가의 의견을 종합하여 산정하는 기법.

상향식 비용 산정 기법
프로젝트의 세부적인 작업 단위별로 비용을 산정한 후 집계하여 전체 비용을 산정하는 방법
ex) LOC기법, 개발 단계별 인월수 Effort per Task, 수학적 산정 기법(COCOMO 모형, Putnam 모형, 기능점수 모형)

LOC기법 : 소프트웨어 각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정함.
ex) 총 라인수 50000, 프로그래머 월 생산성 200, 프로그래머 10명, 개발소요 기간은 ? -> 50000/200/10 = 25

개발 단계별 인월수 기법 : LOC기법을 보완하기 위한 기법으로, 각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정. 
LOC기법 보다 더 정확하다.

COCOMO Contructive Cost Model 모형 : 보헴이 제안한 것으로, 원시 프로그램의 규모인 LOC에 의한 비용 산정 기법
COCOMO의 개발 유형
1. 조직형 Organic : 중,소규모의 소프트웨어 5만 라인 이하의 소프트웨어 개발
2. 반분리형 Semi-Detached : 30만 라인 이하의 소프트웨어 개발
3. 내장형 Embedded : 최대형 규모의 트랜잭션 처리 시스템이나 운영체제 등 30만 라인 이상의 소프트웨어 개발

COCOMO 모형의 종류
1. 기본형 Basic
2. 중간형 Intermediate
3. 발전형 Detailed

Putnam 모형
소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형, 생명 주기 예측 모형이라고도 함.
Rayleigh-Norden 곡선의 노력 분포도를 기초로 하고 대형 프로젝트에 이용되는 기법. 개발 기간이 늘어날수록 적용 인원의 노력이 감소함.
SLIM : Rayleigh-Norden 곡선과 putnam예측 모형을 기초로 개발된 자동화 추정 도구

기능점수 Function Point 모형
알브레히트가 제안한 것으로, 소프트웨어의 기능을 증대시키는 요인별로 가중치를 부여하고, 요인별 가중치를 합산하여 총 기능점수를 산출하며 총 기능점수와 영향도를 이용하여 기능점수(FP)를 구한 후 이를 이용해서 비용을 산정하는 기법.
ESTIMACS: 다양한 프로젝트와 개인별 요소를 수용하도록 FP 모형을 기초로 개발된 자동화 추정 도구

기능점수 모형에서 비용산정에 이용되는 요소
자료 입력(입력 양식), 정보 출력(출력 보고서), 명령어(사용자 질의수), 데이터 파일, 필요한 외부 루틴과의 인터페이스

프로젝트 관리 : 주어진 기간 내에 최소의 비용으로 사용자를 만족시키는 시스템을 개발하기 위한 전반적인 활동
일정, 비용, 인력, 위험, 품질 관리

ISO/IEC 12207
ISO(국제 표준화 기구)에서 만든 표준 소프트웨어. 생명 주기 프로세스로 소프트웨어를 체계적으로 관리하기 위한 생명 주기 표준을 제공함.
ex) 기본 생명 프로세스, 조직 생명 주기 프로세스, 지원 생명 주기 프로세스

CMMI Capability Maturity Model Integration 능력 성숙도 통합 모델
소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가하는 모델

프로세스 성숙도 5단계
초기 : 정의된 프로세스 없음
관리 : 규칙화된 프로세스
정의 : 표준화된 프로세스
정량적 관리 : 예측 가능한 프로세스
최적화 : 지속적 개선 프로세스

SPICE : 소프트웨어 프로세스를 평가 및 개선하는 국제 표준으로 공식 명칭은 ISO/IEC 15504 이다.
목적
1. 프로세스 개선을 위한 개발 기관이 스스로 평가
2. 기관에서 지정한 요구조건의 만족 여부를 개발 조직이 스스로 평가
3. 계약 체결을 위해 수탁 기관의 프로세스를 평가

SPICE의 5개 프로세스 범주
1. 고객 공급자 프로세스
2. 공학 프로세스
3. 지원 프로세스
4. 관리 프로세스
5. 조직 프로세스

SPICE의 프로세스 수행 능력 단계
불완정, 수행, 관리, 확립, 예측, 최적화

소프트웨어 개발 방법론 테일러링 고려사항
내부적 요건 : 목표 환경, 요구사항, 프로젝트 규모, 보유 기술
외부적 요건 : 법적 제약사항, 국제표준 품질기준

스프링 프레임워크
1. JAVA 플랫폼을 위한 오픈 소스 경량형 어플리케이션 프레임워크
2. 전자정부 표준 프레임워크의 기반 기술로 사용됨.
3. 동적인 웹 사이트 개발을 위해 다양한 서비스 제공

전자정부 프레임워크
대한민국의 공공부문 정보화 사업 시 효율적인 정보 시스템의 구축을 지원하기 위해 필요한 기능 및 아키텍처를 제공하는 프레임 워크
응용 소프트웨어의 표준화, 품질 및 재사용성의 향상을 목표로 함.

닷넷 프레임워크
Microsoft에서 개발한 Windows 프로그램 개발 및 실행 환경을 제공하는 프레임워크
공통어 런타임이라는 가상머신 상에서 작동함.

네트워크 구축
1. 버스형 Bus : 한개의 통신 회선에 여러대의 단말장치가 연결되어 있는 형태 LAN에서 사용. 물리적 구조 간단.
2. 계층형 Tree : 분산 처리 시스템
3. 링형 Ring : 서로 이웃하는 것 끼리 포인트 투 포인트 방식으로 연결시킨 형태 LAN에서 사용. 분산 및 집중 제어 모두 가능.
데이터는 단방향 또는 양방향으로 전송할 수 있지만, 단방향 링의 경우 어느 하나라도 고장나면 전체 통신망에 영향을 미침.
4. 성형 Star 중앙 집중형 : 중앙에 중앙 컴퓨터가 있어 중앙 집중식 네트워크 구성 형태. 포인트 투 포인트 방식으로 회선 연결
단말장치의 추가 제거가 쉽지만, 중앙 컴퓨터가 고장나면 전체 통신망의 기능이 정지됨. 교환 노드의 수가 가장 적다.
5. 메쉬형 Mesh 네트워크 형: 모든 지점의 컴퓨터와 단말장치를 서로 연결한 형태, 회선 장애 시 다른 경로를 통하여 데이터 전송 가능.

네트워크의 분류
근거리 통신망 LAN : 사이트 간의 거리가 짧아 데이터 전송 속도가 빠르고, 에러 발생율이 낮음. 주로 버스형, 링형 구조
원거리 통신망 WAN : 사이트 간의 거리가 멀어 통신 속도가 느리고, 에러 발생율이 높음.

스위치 Switch 분류
1. L2 스위치
2. L3 스위치
3. L4 스위치
4. L7 스위치

경로 제어 프로토콜 Routing Protocol
RIP : IGP로 Bellman-Ford 알고리즘을 이용하여 최적의 경로를 설정하는 소규모 프로토콜
OSPF : RIP단점 개선. 대규모 프로토콜
BGP : EGP의 단점을 보완하기 위해 만들어짐.

흐름 제어 Flow Control : 네트워크 내의 원활한 흐름을 위해 송, 수친 측 사이에 전송되는 패킷의 양이나 속도를 규제하는 기능.
ex) 정지-대기, 슬라이딩 윈도우

교착 상태(Dead Lock) 방지
교환기 내에 패킷들을 축적하는 기억 공간이 꽉 차 있을 때 다음 패킷들이 기억 공간에 들어가기 위해 무한정 기다리는 현상

교착 상태 발생의 필요 충분 조건
상호 배제, 점유와 대기, 환형 대기, 비선점
