요구사항 명세: 분석된 요구사항을 바탕으로 모델을 작성하고 문서화 하는 것을 의미.
요구사항 명세기법
정형 명세기법 
기법 : 수학적 원리 기반, 모델 기반
작성기법 : 수학적 기호 정형화된 표기법 
특징 : 요구사항을 정확하고 간결하게 표현, 일관성이 있어서 완전성 검증이 가능, 표기법이 어려워 사용자가 이해하기 어려움
종류 : VDM, Z, Petri-net, CSP

비정형 명세기법 
기법 : 상태 기능 객체 중심
작성기법 : 일반 명사, 동사 등의 자연어를 기반으로 서술 또는 다이어그램으로 작성
특징 : 자연어의 사용으로 인해 요구사항에 대한 결과가 작성자에 따라 다를 수 있어 일관성이 떨어지고, 해석이 달라짐. 
내용의 이해가 쉬어 의사소통 용이.
종류 : FSM, Decision Table, ER 모델링, State Chart(SADT) 등

DRM
콘텐츠 분배자 : 콘텐츠를 유통하는 곳 혹은 사람.

폴딩법 : 해싱함수 중 레코드 키를 여러 부분으로 나누고, 나눈 부분의 각 숫자를 더하거나 XOR한 값을 홈 주소로 사용하는 방식

데이터 모델에 표시해야할 요소
1. 논리적 데이터 구조 : 논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질을 표현
2. 연산 : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구
3. 제약조건 : DB에 저장될 수 있는 실제 데이터의 논리적인 제약 조건

데이터 베이스의 설계 순서
요구조건분석 : 요구 조건 명세서 작성
개념적설계 : 독립적인 개념 스키마 모델링 ex)E-R 다이어그램 모델
논리적설계 : 목표 DBMS에 맞는 (논리) 스키마 설계 ex) 트랜잭션 인터페이스 설계, 테이블 설계, 매핑, 스키마의 평가 및 정제
물리적설계 : DBMS에 맞는 물리적 구조의 데이터로 변환 ex) 저장 레코드, 접근 경로 설계, 레코드 집중의 분석 및 설계
구현 : 목표 DBMS의 DDL로 DB 생성, 트랜잭션 작성.

데이터웨어하우스의 기본연산(OLAP On-line analytical processing)
1. Roll up : 분석할 항목에 대해 구체적인 내용의 상세 데이터로부터 요약된 형태의 데이터로 접근하는 기능
2. Drill-down : 분석할 항목에 대해 요약된 형태의 데이터로부터 구체적인 내용의 상세 데이터로 접근하는 기능. Rollup과 반대
3. Pivoting : 보고서의 행, 열, 페이지 차원을 바꾸어 볼 수 있는 기능.
4. Slicing : 다차원 데이터 항목들을 다양한 각도에서 조회하고 자유롭게 비교하는 기능.
5. Dicing : Slicing을 더 쪼개는 형태.

세그먼트 테이블의 논리주소(s,d)에 대한 물리주소
물리주소는 세그먼트번호(s)의 시작 주소(based) + d
ex) 논리주소(2,176)의 물리주소는 세그먼트 번호 2의 시작주소 222, 길이 198 이면
시작주소 222 + 논리주소의 d 176 = 398.

CMM Capability Maturity Model의 레벨
1. 초기단계
2. 반복가능단계
3. 정의단계
4. 관리단계
5. 최적단계

서비스 지향 아키텍처 기반 어플리케이션을 구성하는 층
1. 표현층
2. 업무 프로세스
3. 서비스 중간( 비즈니스층)
4. 어플리케이션
5. 데이터 저장

NS Chart
1. 논리의 기술에 중점을 둔 도형을 이용한 표현 방법
2. 그리기 어려움
3. 순차, 선택, 반복으로 표현한다.
4. 임의의 제어 이동이 어렵다.
5. 그래픽 설계 도구이고 상자 도표라고도 함. 프로그램 구현이 쉽다.
6. 조건이 복합되어 있는 곳의 처리를 명확히 식별하기에 적합하다. (if문이 여러개일 때 가능)

SDDC : 네트워킹, 스토리지, CPU 및 보안과 같은 모든 인프라 요소가 가상화 되어 서비스로 제공되는 인프라입니다.
구성요소
1. 네트워크 가상화
2. 스토리지 가상화
3. 서버 가상화


XP eXtreme Programming : 짧은 주기의 반복을 통해 요구 변화에 신속하게 대응하여 위험을 줄이고 고객 관점의 고품질 SW를 빠르게
전달하는 Agile 방법론의 기법
특징 : 개발자, 관리자, 고객 간 조화로 개발 생산성을 높이고자 하는 접근법.
      고객 요구사항 변경에 적극적, 긍정적으로 대처.

개발 절차 용어
사용자 스토리, 스파이크, 릴리즈 계획, 승인 테스트, 소규모 릴리즈

요구분석
1. 요구추출 - 기능적인 요구와 비기능적 요구 조건 추출. 계획 단계에 정의한 문제 범위 안에서 사용자의 요구를 찾는 것.
2. 도메인분석 - 요구에 대한 정보를 수집하고 배경을 분석.
3. 모델링 - 도메인 분석을 통해 얻은 자료를 개념화 다이어그램을 이용하여 모델화한다고 볼 수 있다.
4. 프로토타이핑과 시험 - 분석된 기능적 요구의 타당성시험을 위한 프로토 타입 생성
5. 문서화 및 검토 - 요구 분석서를 작성. 시스템의 기능, 성능, 정보 표현, 제약, 검증 평가 기준에 대하여 검토

기능적 요구사항
1. 시스템이 수행해야 하는 행위들을 구체화 한 것
2. 시스템에서 제공해야 할 기능을 정의한 것
3. 입력기능, 출력기능, 데이터베이스 기능, 통신 기능 등

비기능적 요구사항
1. 시스템이 가져야 하는 기능 이외의 요구사항
2. 시스템의 전체적인 품질이나 고려해야 하는 제약사항 등
3. 사용 용이성, 효율성, 신뢰성, 이식성, 유연성, 확장성 등
4. 성능적인 면 : 응답 속도, 자원 사용량 등
5. 보안 측면: 침입 대응, 침입 탐지, 사용자 인증, 권한 부여 등

절차지향 분석 기법
기능 중심으로 시스템을 파악하며 순차적인 처리가 중요시되는 하향식(Top-Down) 방식.

선형구조 : 리스트, 스택, 큐, 데크
비선형구조 : 트리, 그래프
파일구조 : 순차파일, 색인파일, 직접파일

DB Index 인덱스
추가적인 쓰기 작업과 저장 공간을 활용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조
단점 : 정렬된 상태를 계속 유지 시켜줘야 한다.

유스케이스 : UML의 행위자(액터)와 액터가 요구하여 시스템이 수행하는 일의 목표.
유스케이스의 관계 : 액터와 유스케이스, 유스케이스와 유스케이스 사이에서 나타나고, 서로 상호작용을 한다는 의미.
1. 포함관계(필수적 관계, 연관)

2. 일반화 관계 : 유스케이스와 유스케이스 사이

3. 확장관계(선택적 관계)

