# 프로그래밍 언어 활용

개발 환경 구축 : 응용 소프트웨어 개발을 위해 개발 프로젝트를 이해하고 하드웨어 및 소프트웨어 장비를 구축하는 것.
하드웨어 환경 : 사용자의 인터페이스 역할을 하는 클라이언트(Client)와 통신하여 서비스를 제공하는 서버로 구성됨.
클라이언트 : PC, 스마트폰 등.
서버 : 웹 서버, 웹 어플리케이션 (WAS), DB 서버, 파일 서버 등.

WAS: 동적인 콘텐츠를 처리하기 위한 미들웨어(= 소프트웨어) <-> 웹 서버 : 정적인 콘텐츠 처리하기 위한 미들웨어.

개발 언어의 선정 기준
1. 적정성
2. 효율성
3. 이식성
4. 친밀성
5. 범용성

서버 개발 : 웹 어플리케이션의 로직을 구현할 서버 프로그램을 제작하여 웹 어플리케이션 서버(WAS)에 탑재하는 것을 의미함.

서버 개발 프레임워크
프레임워크 : 소프트웨어에서는 특정 기능을 수행하기 위해 필요한 클래스나 인터페이스 등을 모아둔 집합체를 뜻함.
대부분 MVC Model View Control 패턴을 기반으로 개발됨.
종류 : Spring, Node.js, Django, Codeigniter, Ruby on Rails

서버 프로그램 구현(효과적인 모듈 설계)
1. 모듈 및 공통 모듈을 개발한 후, 모듈들을 통합하는 방식으로 구현, 유지보수 용이해야 함.
2. 독립성을 높이려면 모듈의 결합도를 약하게 하고, 응집도를 강하게 하며 모듈의 크기를 작게 만들어야 함.
3. 복잡도와 중복성을 줄이고 일관성 유지
4. 공통 모듈은 여러 프로그램에서 재사용(Reuse)할 수 있는 모듈을 의미함.
-> 함수와 객체 재사용, 컴포넌트 재사용, 어플리케이션 재사용

재사용 프로그래밍 기법
1. 객체지향 프로그래밍
2. 제네릭 프로그래밍
3. 자동 프로그래밍
4. 메타 프로그래밍

프레임워크의 특성
1. 모듈화: 설계 및 구현의 변경에 따른 영향을 최소화함.
2. 재사용성: 재사용 가능한 모듈들을 제공함으로써 생산성을 향상시킴.
3. 확장성: 다형성을 통한 인터페이스 확장이 가능
4. 제어의 역흐름: 객체들의 제어를 프레임워크가 관리.

프레임워크의 구성요소
개발, 실행, 운영, 관리 환경

소프트웨어의 개발 보안 : 개발 과정중에 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안 활동을 의미 ex) 시큐어 코딩(secure coding)
기밀성, 무결성, 가용성을 유지하는 것이 목표.

소프트웨어 개발 보안 점검 항목
세션 통제, 입력 데이터 검증 및 표현, 보안 기능, 시간 및 상태, 에러 처리, 코드 오류, 캡슐화, API오용

API: 응용 프로그램 개발 시 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 함으로써 효율적인 소프트웨어 구현을 도와주는 인터페이스 ex) Windows API, 단일 유닉스 규격(SUS), JAVA API, 웹 API 등.

배치 프로그램 : 사용자와의 상호 작용 없이 여러 작업들을 미리 정해진 일련의 순서에 따라 일괄적으로 처리하는 것.
이벤트성 배치, On-Demand 배치, 정기 배치

필수요소
대용량 데이터, 자동화, 견고성, 안정성/신뢰성, 성능

절차적 프로그래밍 언어 : 일련의 처리 절차를 정해진 문법에 따라 순서대로 기술해 나가는 언어. 절차(Procedure)를 중요시 함.
장단점
1. 컴퓨터의 처리 구조와 유사하여 실행 속도가 빠름.
2. 같은 코드를 복사하지 않고 다른 위치에서 호출하여 사용할 수 있음.(이식성 좋음)
3. 모듈 구성이 용이하며, 구조적인 프로그래밍이 가능함.
4. 프로그램을 분석하기 어렵고, 유지 보수나 코드의 수정이 어려움.

절차적 프로그래밍 언어의 종류
C
Algol: 수치계산이나 논리 연산을 위한 과학 기술 계산용 언어, PASCAL과 C언어의 모체
Cobol: 사무 처리용 언어, 영어 문장형식으로 구성되어 있어 이해와 사용이 쉬움, 4개의 DIVISION으로 구성됨.
Fortran: 과학 기술 계산용 언어, 수학과 공학 분야의 공식이나 수식과 같은 형태로 프로그래밍 가능.
Basic : 교육용으로 개발되어 언어의 문법이 쉬움, 다양한 종류가 존재하며 서로 다른 종류 사이의 소스 코드는 호환되지 않음.

객체지향 프로그래밍 언어의 장단점
1. 상속을 통한 재사용과 시스템의 확장이 용이하고, 코드의 재활용성이 높음
2. 사용자와 개발자 사이의 이해를 쉽게 해주고, 대형 프로그램의 작성이 용이함.
3. 프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계 방법이 없음.
4. 구현 시 처리 시간이 지연됨 -> 실행 속도가 느림.

종류 : C++, C#, JAVA, Delphi, Smalltalk

객체지향 프로그래밍 언어의 구성 요소
객체 : 독립적으로 식별 가능한 이름을 갖고 있음, 일정한 기억장소를 갖고 있음.
클래스 : 공통된 속성과 연산(행위)를 갖는 객체의 집합, 데이터를 추상화하는 단위, 객체들이 갖는 속성과 연산(Method)을 정의.
인스턴스 : 클래스에 속한 각각의 객체, 새로운 객체를 생성하는 것을 인스턴스화.
메소드 : 클래스로붙 생성된 객체를 사용하는 방법, 함수 또는 프로시저에 해당하는 연산.
메시지 : 객체에게 어떤 행위를 하도록 지시하기 위한 방법

객체지향 프로그래밍 언어의 특징
캡슐화: 데이터(속성)와 데이터 처리하는 함수를 하나로 묶는 것, 캡슐화된 객체들은 재사용이 용이함.
상속성: 부모 클래스의 모든 속성과 연산을 자식 클래스가 물려받는 것. 
다형성 : 객체가 가진 고유의 방법(특성)으로 응답할 수 있는 능력
추상화: 불필요한 부분은 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화, 모델화 하는 것.
정보은닉 : 자신의 정보를 숨기고 자신의 연산마을 통하여 접근을 허용하는 것. 캡슐화에서 가장 중요한 개념.

스크립트 언어 : 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하게 하는 언어.
클라이언트용 언어 : JavaScript
서버용 스크립트 언어: ASP, JSP,PHP, Python

장단점
1. 컴파일 없이 바로 실행하므로 결과를 바로 확인할 수 있음.
2. 개발시간이 짧고, 소스 코드를 쉽고 빠르게 수정할 수 있음.
3. 코드를 읽고 해석해야 하므로 실행 속도가 느리고, 런타임 오류가 많이 발생함.

스크립트 언어의 종류
1. JavaScript : 클래스가 존재하지 않으며 변수 선언도 필요 없음.
2. ASP Active Server Page : 동적으로 수행되는 페이지 ( MS제작이라 Windows계열에서만 수행 가능)
3. JSP Java Server Page
4. PHP Professional Hypertext Preprocessor: C, JAVA 등과 문법이 유사함, LINUX, UNIX, Windows 운영체제에서 사용 가능.
5. Python : 다양한 플랫폼에서 사용 가능, 라이브러리(모듈) 풍부, 대화형 인터프리터 언어
6. Perl : 인터프리터 방식의 프로그래밍 언어

선언형 언어 : 프로그램이 수행해야하는 문제를 기술하는 언어. 함수형 언어(적용형)과 논리형 언어(선언적)이 있음. 알고리즘 명시X
장단점
1. 가독성이나 재사용이 좋고, 오류가 적음
2. 프로그램 동작을 변경하지 않고도 관련 값을 대체할 수 있음.

선언형 언어의 종류
Haskell(하스켈): 함수형 프로그래밍 언어, 부작용 없음.
LISP(리스프): 함수형 프로그래밍 언어, 수학 표기법을 나타내기 위한 목적
PROLOG(프롤로그): 논리식 기반으로 객체 간의 관계에 관한 문제를 해결하기 위해 사용
HTML Hyper Text Markup Language
XML: 기존 HTML의 단점을 보완해 웹에서 구조화된 폭 넓고 다양한 문서들을 상호 교환할 수 있도록 설계된 언어

라이브러리: 프로그램을 효율적으로 개발할 수 있도록 자주 사용하는 함수나 데이터들을 미리 만들어 모아놓은 집합체.

운영체제의 정의 : 컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임.
사용자 > 응용 프로그램 > 유틸리티 > 운영체제 OS > 하드웨어

운영체제의 목적
1. 처리 능력 : 일정 시간 내에 시스템이 처리하는 일의 양
2. 반환 시간 : 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간
3. 사용 가능도 : 필요가 있을 때 즉시 사용 가능한 정도.
4. 신뢰도 : 시스템이 주어진 문제를 정확하게 해결하는 정도

운영체제의 기능
자원관리, 스케줄링 기능, 인터페이스 제공, 데이터 자원의 공유 기능, 입출력 장치와 사용자 프로그램 제어, 시스템 오류 검사 및 복구,
자원 보호 기능, 입출력에 대한 보조 기능 제공

주요 자원 관리
프로세스, 기억장치, 주변장치, 파일 관리

운영체제의 종류
Windows, UNIX, LINUX, MacOS, MS-DOS

Windows의 주요 특징
1. GUI Graphic User Interface : 마우스로 아이콘이나 메뉴를 선택
2. 선점형 멀티태스킹
3. PnP Plug and Play
4. OLE Object Linking and Embedding
5. 255자의 긴 파일명. 한글은 127자까지 가능.
6. 개인사용자 Self-User 시스템 : 컴퓨터 한 대를 한 사람이 독점해서 사용.

UNIX의 개요 : 소스가 공개된 개방형 시스템, 시분할 시스템을 위해 설계된 대화식 운영체제, 다중 작업(멀티-태스킹) 지원,
다중 사용자 지원, 대부분 C언어로 제작되어 있고 이식성이 높으며 프로세스 간의 호환성이 높음, 계층 구조(트리 구조)의 파일 시스템

하드웨어 > 커널 > 쉘 > 유틸리티 > 사용자

커널 : UNIX의 핵심. 프로그램과 하드웨어 간의 인터페이스 역할을 담당, 프로세스 관리, 기억장치 관리, 파일 관리, 입,출력 관리

쉘 : 명령어 해석기. 시스템과 사용자 간의 인터페이스 역할을 담당, 파이프라인 기능 지원, 여러 종류의 쉘이 있다. 
== DOS의 COMMAND.COM과 같다.

UNIX에서 프로세스 간의 통신
1. 시그널 : 간단한 메시지를 이용하여 통신. 초기 UNIX에서 사용
2. 파이프 : 한 프로세스의 출력이 다른 프로세스의 입력으로 사용되는 단방향 통신
3. 소켓 : 프로세스 사이의 대화를 가능하게 하는 쌍방향 통신 방식

LINUX : 1991년 리누스 토발즈가 UNIX를 기반으로 개발한 운영체제, 대부분의 특징이 UNIX와 동일하며 UNIX와 완벽하게 호환. 오픈소스

MAC OS : 1980년대 Apple사가 UNIX를 기반으로 개발한 운영체제

기억장치의 관리 : 보조기억장치의 프로그램이나 데이터를 한정된 주기억장치의 공간에 효율적으로 사용하기 위함.
1. 반입 전략 : 보조기억장치에 보관중인 프로그램이나 데이터를 언제(When) 주기억장치로 적재할 것인지.
  요구 반입 : 실행중인 프로그램이 특정 프로그램이나 데이터 등의 참조를 요구할 때 적재하는 방법
  예상 반입 : 실행중인 프로그램에 의해 참조될 프로그램이나 데이터를 미리 예상하여 적재하는 방법
  
2. 배치 전략 : 보조기억장치의 프로그램이나 데이터를 주기억장치의 어디에(Where) 위치시킬것인지.
  최초 적합(First Fit) : 빈 영역 중에서 첫 번째 분할 영역에 배치
  최적 적합(Best Fit) : 빈 영역 중에서 단편화를 가장 적게 남기는 분할 영역에 배치
  최악 적합(Worst Fit): 빈 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치
  
3. 교체 전략 : 이미 사용되고 있는 영역 중에서 어느(Who) 영역을 교체할 것인지. 
ex) FIFO 가장 먼저 들어와 오래된 페이지를 교체.
LRU Least Recently Used 가장 오래 전에 사용된 페이지 교체
LFU Least Frequently Used 사용 빈도가 가장 적은 페이지 교체
NUR Not Used Recently LRU와 비슷한 알고리즘으로, 최근 사용하지 않은 페이지 교체.
OPT OPTimal replacement (최적 교체) 앞으로 가장 오랫동안 사용하지 않을 페이지를 교체
SCR Second Chance Replacement (2차 기회 교체) 가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지하기 위한 것으로, FIFO 기법의 단점을 보완하는 기법.

4. 할당 전략 : 프로그램이나 데이터를 실행시키기 위해 주기억장치에 어떻게(How) 할당할지 정함.

연속 할당 기법: 프로그램을 주 기억장치에 연속으로 할당하는 기법
  단일 분할 할당 기법: 오버레이, 스와핑
  다중 분할 할당 기법: 고정(정적)분할 할당 기법, 가변(동적)분할 할당 기법
  
분산 할당 기법: 프로그램을 특정 단위의 조각으로 나뉘어 할당하는 기법
1. 페이징 기법 : 가상기억장치에 보관되어 있는 프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후 주기억장치에 적재시켜 실행.
  일정한 크기로 나눈 단위를 페이지라 하고, 페이지 크기로 일정하게 나누어진 주기억장치의 단위를 페이지 프레임이라고 함.
  내부 단편화가 발생하고, 주소 변환을 위해 페이지 맵 테이블(페이지의 위치정보를 가짐) 필요. -> 비용 증가, 처리 속도 감소.
  
2. 세그먼테이션 기법: 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 기억공간을 절약하기 위해서 사용.
  논리적인 크기로 나눈 단위를 세그먼트라 하고 각 세그먼트는 고유한 이름과 크기를 가짐.
  기억장치의 사용자 관점을 보존하는 기억장치 관리 기법
  세그먼트 또한 페이징과 같이 주소변환을 위해 세그먼트 맵 테이블 필요.
  세그먼트가 주기억장치에 적재될 때 다른 세그먼트에게 할당된 영역을 침범할 수 없으며, 이를 위해 기억장치 보호키가 필요.
  외부 단편화 발생.
  
페이지 크기가 작을 경우 <== 클 경우
1. 페이지 단편화 감소, 한개의 페이지를 주기억장치로 이동하는 시간이 줄어듬 <=> 단편화 증가, 이동시간 증가
2. 불필요한 내용이 주기억장치에 적재될 확률이 적으므로 효율적인 워킹 셋 유지 <=> 적재될 수 있음.
3. 기억장치 효율 높아짐 
4. 페이지 맵 테이블 크기가 커지고, 매핑 속도가 늦어짐. <=> 테이블의 크기가 작아지고, 매핑 속도가 빨라짐
5. 디스크 접근 횟수가 많아져 전체적인 입,출력 시간은 늘어남. <=>디스크 접근 횟수 감소, 입,출력 효율성이 증가.

Locality 지역성 : 일부 페이지만 집중적으로 참조하는 성질
스레싱을 방지하기 위한 워킹 셋 이론의 기반, 데닝 교수에 의해 구역성의 개념이 증명됐으며, 캐시 메모리 시스템의 이론적 근거.

시간적 구역성 : 한번 참조한 페이지는 가까운 시간 내에 계속 참조할 가능성이 높다.
공간적 구역성 : 어느 하나의 페이지를 참조하면 그 근처의 페이지를 계속 참조할 가능성이 높다.

워킹 셋 : 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합.
페이지 부재 및 페이지 교체 현상이 줄어들어 프로세스의 기억장치 사용이 안정됨.
워킹 셋은 시간에 따라 변경됨.

페이지 부재 빈도 PFP Page Fault Freqeuncy : 페이지 부재율을 적정 수준으로 유지하는 방식. 페이지 부재가 일어나는 횟수를 의미.

프리페이징(Prepaging) : 필요할 것 같은 모든 페이지를 미리 한꺼번에 페이지 프레임에 적재하는 기법

스레싱 : 페이지 교체에 소요되는 시간이 더 많아지는 현상.
다중 프로그래밍 (멀티태스킹) 의 정도가 높아지면 CPU의 이용률 또한 특정 시점까지 높아지지만 더욱 커지면 스래싱이 나타나고, CPU의 이용률은 급격히 감소.

스래싱 현상 방지 방법
1. 다중 프로그래밍의 정도를 적정 수준으로 유지.
2. 페이지 부재 빈도를 조절해 사용
3. 워킹셋을 유지함
4. 부족한 자원을 증설하고, 일부 프로세스를 중단시킴.

프로세스 : 실행중인 프로그램을 의미, 작업(Job) 또는 Task 라고도 함. 프로세서 -> 프로세스 -> 프로시저
운영체제가 관리하는 실행 단위, 비동기적 행위를 일으키는 주체, 프로시저가 활동중인 것.

PCB Process Control Block 프로세스 제어 블록

스레드 Thread : 프로세스 내에서의 작업 단위, 프로세스의 일부 특성을 갖고 있어서 경량 프로세스라고도 함, 독립적인 다중 수행 가능.

HRN Highest Response-ratio Next : SJF 기법의 가뭄 현상을 보완하기 위한 방식.
우선순위 계산식의 수치가 가장 높은 것부터 낮은 순으로 우선순위를 부여해 긴 작업과 짧은 작업 간의 지나친 불평등을 해소.
HRN 우선순위 계산식 : (대기시간 + 서비스시간) / 서비스시간

네트워크 관련 장비
게이트웨이 : 전 계층의 프로토콜 구조가 다른 네트워크의 연결 수행
라우터 : 데이터 전송의 최적 경로를 선택할 수 있는 기능이 추가된 것. 네트워크 계층
스위치 : 브리지와 같이 LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치. 데이터링크 계층
브리지 : LAN과 LAN을 연결하거나 LAN안에서의 컴퓨터 그룹을 연결하는 기능 수행, 데이터링크 계층
리피터 : 신호가 왜곡되거나 약해질 경우 다시 전송하는 역할 수행. 물리 계층
허브 : 한 사무실이나 가까운 거리의 컴퓨터들을 연결하는 장치. 물리 계층

프로토콜 : 서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화시켜 놓은 통신 규약
기본 요소 :
구문 : 데이터의 형식, 부호화, 신호 레벨 등을 규정
의미 : 두 기기 간의 효율적이고 정확한 정보 전송을 위한 협조 사항과 오류 관리를 위한 제어 정보를 규정
타이밍 : 두 기기 간의 통신 속도, 메시지의 순서 제어 등을 규정

