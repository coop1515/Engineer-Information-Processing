# 프로그래밍 언어 활용

개발 환경 구축 : 응용 소프트웨어 개발을 위해 개발 프로젝트를 이해하고 하드웨어 및 소프트웨어 장비를 구축하는 것.
하드웨어 환경 : 사용자의 인터페이스 역할을 하는 클라이언트(Client)와 통신하여 서비스를 제공하는 서버로 구성됨.
클라이언트 : PC, 스마트폰 등.
서버 : 웹 서버, 웹 어플리케이션 (WAS), DB 서버, 파일 서버 등.

WAS: 동적인 콘텐츠를 처리하기 위한 미들웨어(= 소프트웨어) <-> 웹 서버 : 정적인 콘텐츠 처리하기 위한 미들웨어.

개발 언어의 선정 기준
1. 적정성
2. 효율성
3. 이식성
4. 친밀성
5. 범용성

서버 개발 : 웹 어플리케이션의 로직을 구현할 서버 프로그램을 제작하여 웹 어플리케이션 서버(WAS)에 탑재하는 것을 의미함.

서버 개발 프레임워크
프레임워크 : 소프트웨어에서는 특정 기능을 수행하기 위해 필요한 클래스나 인터페이스 등을 모아둔 집합체를 뜻함.
대부분 MVC Model View Control 패턴을 기반으로 개발됨.
종류 : Spring, Node.js, Django, Codeigniter, Ruby on Rails

서버 프로그램 구현(효과적인 모듈 설계)
1. 모듈 및 공통 모듈을 개발한 후, 모듈들을 통합하는 방식으로 구현, 유지보수 용이해야 함.
2. 독립성을 높이려면 모듈의 결합도를 약하게 하고, 응집도를 강하게 하며 모듈의 크기를 작게 만들어야 함.
3. 복잡도와 중복성을 줄이고 일관성 유지
4. 공통 모듈은 여러 프로그램에서 재사용(Reuse)할 수 있는 모듈을 의미함.
-> 함수와 객체 재사용, 컴포넌트 재사용, 어플리케이션 재사용

재사용 프로그래밍 기법
1. 객체지향 프로그래밍
2. 제네릭 프로그래밍
3. 자동 프로그래밍
4. 메타 프로그래밍

프레임워크의 특성
1. 모듈화: 설계 및 구현의 변경에 따른 영향을 최소화함.
2. 재사용성: 재사용 가능한 모듈들을 제공함으로써 생산성을 향상시킴.
3. 확장성: 다형성을 통한 인터페이스 확장이 가능
4. 제어의 역흐름: 객체들의 제어를 프레임워크가 관리.

프레임워크의 구성요소
개발, 실행, 운영, 관리 환경

소프트웨어의 개발 보안 : 개발 과정중에 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안 활동을 의미 ex) 시큐어 코딩(secure coding)
기밀성, 무결성, 가용성을 유지하는 것이 목표.

소프트웨어 개발 보안 점검 항목
세션 통제, 입력 데이터 검증 및 표현, 보안 기능, 시간 및 상태, 에러 처리, 코드 오류, 캡슐화, API오용

API: 응용 프로그램 개발 시 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 함으로써 효율적인 소프트웨어 구현을 도와주는 인터페이스 ex) Windows API, 단일 유닉스 규격(SUS), JAVA API, 웹 API 등.

배치 프로그램 : 사용자와의 상호 작용 없이 여러 작업들을 미리 정해진 일련의 순서에 따라 일괄적으로 처리하는 것.
이벤트성 배치, On-Demand 배치, 정기 배치

필수요소
대용량 데이터, 자동화, 견고성, 안정성/신뢰성, 성능

절차적 프로그래밍 언어 : 일련의 처리 절차를 정해진 문법에 따라 순서대로 기술해 나가는 언어. 절차(Procedure)를 중요시 함.
장단점
1. 컴퓨터의 처리 구조와 유사하여 실행 속도가 빠름.
2. 같은 코드를 복사하지 않고 다른 위치에서 호출하여 사용할 수 있음.(이식성 좋음)
3. 모듈 구성이 용이하며, 구조적인 프로그래밍이 가능함.
4. 프로그램을 분석하기 어렵고, 유지 보수나 코드의 수정이 어려움.

절차적 프로그래밍 언어의 종류
C
Algol: 수치계산이나 논리 연산을 위한 과학 기술 계산용 언어, PASCAL과 C언어의 모체
Cobol: 사무 처리용 언어, 영어 문장형식으로 구성되어 있어 이해와 사용이 쉬움, 4개의 DIVISION으로 구성됨.
Fortran: 과학 기술 계산용 언어, 수학과 공학 분야의 공식이나 수식과 같은 형태로 프로그래밍 가능.
Basic : 교육용으로 개발되어 언어의 문법이 쉬움, 다양한 종류가 존재하며 서로 다른 종류 사이의 소스 코드는 호환되지 않음.

객체지향 프로그래밍 언어의 장단점
1. 상속을 통한 재사용과 시스템의 확장이 용이하고, 코드의 재활용성이 높음
2. 사용자와 개발자 사이의 이해를 쉽게 해주고, 대형 프로그램의 작성이 용이함.
3. 프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계 방법이 없음.
4. 구현 시 처리 시간이 지연됨 -> 실행 속도가 느림.

종류 : C++, C#, JAVA, Delphi, Smalltalk

객체지향 프로그래밍 언어의 구성 요소
객체 : 독립적으로 식별 가능한 이름을 갖고 있음, 일정한 기억장소를 갖고 있음.
클래스 : 공통된 속성과 연산(행위)를 갖는 객체의 집합, 데이터를 추상화하는 단위, 객체들이 갖는 속성과 연산(Method)을 정의.
인스턴스 : 클래스에 속한 각각의 객체, 새로운 객체를 생성하는 것을 인스턴스화.
메소드 : 클래스로붙 생성된 객체를 사용하는 방법, 함수 또는 프로시저에 해당하는 연산.
메시지 : 객체에게 어떤 행위를 하도록 지시하기 위한 방법

객체지향 프로그래밍 언어의 특징
캡슐화: 데이터(속성)와 데이터 처리하는 함수를 하나로 묶는 것, 캡슐화된 객체들은 재사용이 용이함.
상속성: 부모 클래스의 모든 속성과 연산을 자식 클래스가 물려받는 것. 
다형성 : 객체가 가진 고유의 방법(특성)으로 응답할 수 있는 능력
추상화: 불필요한 부분은 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화, 모델화 하는 것.
정보은닉 : 자신의 정보를 숨기고 자신의 연산마을 통하여 접근을 허용하는 것. 캡슐화에서 가장 중요한 개념.

스크립트 언어 : 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하게 하는 언어.
클라이언트용 언어 : JavaScript
서버용 스크립트 언어: ASP, JSP,PHP, Python

장단점
1. 컴파일 없이 바로 실행하므로 결과를 바로 확인할 수 있음.
2. 개발시간이 짧고, 소스 코드를 쉽고 빠르게 수정할 수 있음.
3. 코드를 읽고 해석해야 하므로 실행 속도가 느리고, 런타임 오류가 많이 발생함.

스크립트 언어의 종류
1. JavaScript : 클래스가 존재하지 않으며 변수 선언도 필요 없음.
2. ASP Active Server Page : 동적으로 수행되는 페이지 ( MS제작이라 Windows계열에서만 수행 가능)
3. JSP Java Server Page
4. PHP Professional Hypertext Preprocessor: C, JAVA 등과 문법이 유사함, LINUX, UNIX, Windows 운영체제에서 사용 가능.
5. Python : 다양한 플랫폼에서 사용 가능, 라이브러리(모듈) 풍부, 대화형 인터프리터 언어
6. Perl : 인터프리터 방식의 프로그래밍 언어

선언형 언어 : 프로그램이 수행해야하는 문제를 기술하는 언어. 함수형 언어(적용형)과 논리형 언어(선언적)이 있음. 알고리즘 명시X
장단점
1. 가독성이나 재사용이 좋고, 오류가 적음
2. 프로그램 동작을 변경하지 않고도 관련 값을 대체할 수 있음.

선언형 언어의 종류
Haskell(하스켈): 함수형 프로그래밍 언어, 부작용 없음.
LISP(리스프): 함수형 프로그래밍 언어, 수학 표기법을 나타내기 위한 목적
PROLOG(프롤로그): 논리식 기반으로 객체 간의 관계에 관한 문제를 해결하기 위해 사용
HTML Hyper Text Markup Language
XML: 기존 HTML의 단점을 보완해 웹에서 구조화된 폭 넓고 다양한 문서들을 상호 교환할 수 있도록 설계된 언어

라이브러리: 프로그램을 효율적으로 개발할 수 있도록 자주 사용하는 함수나 데이터들을 미리 만들어 모아놓은 집합체.

운영체제의 정의 : 
