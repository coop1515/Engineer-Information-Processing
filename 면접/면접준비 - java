JAVA의 특징
- 객체지향 프로그래밍 언어이다.
- 기본 자료형을 제외한 모든 요소들이 객체로 표현되고, 객체 지향 개념의 특징인 캡슐화, 상속, 다형성이 잘 적용된 언어이다.
- 장점
	JVM(Java Virtual Machine) 위에서 동작하기 때문에 운영체제에 독립적이다.
	Gabage Colletor를 통한 자동적인 메모리 관리가 가능하다.
- 단점
	JVM 위에서 동작하기 때문에 실행 속도가 상대적으로 느리다.
	다중 상속이나 타입에 엄격하며, 제약이 많다.

JVM의 역할
- JVM은 스택기반으로 동작하며, Java Byte Code를 OS에 맞게 해석해주는 역할을 하고 가비지 컬렉션을 통해 자동적인 메모리 관리를 해줍니다.

Java 컴파일 과정
1. 개발자가 .java 파일을 생성한다.
2. build 한다.
3. java compiler의 javac의 명령어를 통해 바이트코드(.class)를 생성한다.
4. Class Loader를 통해 JVM 메모리 내에 로드한다.
5. 실행엔진을 통해 컴퓨터가 읽을 수 있는 기계어로 해석된다. (각 OS에 맞는 기계어)

Overridng
- 상위 클래스에 있는 메소드를 하위메소드에서 재정의 하는것.

OverLoading
- 메소드의 매개변수의 개수나 타입을 다르게 하여 같은 이름의 메소드를 여러 개 정의하는 것.

try-with-resource
- try-catch-finally의 문제점을 보완하기 위해 나온 개념이다.
- try 안에 자원 객체를 전달하면, try블록이 끝나고 자동으로 자원 해제 해주는 기능을 말합니다.
- 따로 finally 구문이나 모든 catch 구문에 종료 처리를 하지 않아도 되는 장점이 있다.

불변 객체
- 객체 생성 이후 내부의 상태가 변하지 않는 객체를 말한다.
- java에서는 원시 타입인 경우 final 키워드를 사용해 불변 객체를 만들 수 있고, 참조 타입일 경우엔 추가적인 작업이 필요하다.
- 원시 타입은 int, long, string 같은 것들. 참조 타입은 array, list 이런 것들.

추상 클래스와 인터페이스
- 추상 클래스는 클래스 내 추상 메소드가 하나 이상 포함되거나, abstract로 정의된 경우.
- 인터페이스는 모든 메소드가 추상 메소드로만 이루어져 있는 것을 말한다. (메소드의 모양만 정의해놓음)
- 공통점
	- new 연산자로 인스턴스 생성 불가능
	- 사용하기 위해서는 하위 클래스에서 확장/구현 해야 한다.
- 차이점
	- 인터페이스는 그 인터페이스를 구현하는 모든 클래스에 대해 특정한 메소드가 반드시 존재하도록 강제한다.
	- 추상클래스는 상속받는 클래스들의 공통적인 로직(기능)을 추상화 시키고, 기능 확장을 위해 사용한다.
	- 추상클래스는 다중상속이 불가능하지만, 인터페이스는 다중상속이 가능하다.

싱글톤 패턴
- 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴이다.
- 인스턴스가 1개만 존재해야 한다는 것을 보장하고 싶은 경우와 동일한 인스턴스를 자주 생성해야 하는 경우에 주로 사용한다 (메모리 낭비 방지)
- 예시
	- 대표적 예시로 Spring Bean이 있고, Spring Bean의 등록 방식은 싱글톤 스코프이고, 스프링 컨테이너는 모든 빈들을 싱글톤으로 관리한다.

가비지 컬렉션(Garbege Collection, GC)
- 가비지 컬렉션은 JVM의 메모리 관리 기법 중 하나로 시스템에서 동적으로 할당됐던 메모리 영역 중에서 필요없어진 메모리 영역을 회수하여
메모리를 관리해주는 기법입니다.
- 과정
	- GC의 작업을 수행하기 위해 JVM이 어플리케이션의 실행을 잠시 멈추고GC를 실행하는 쓰레드를 제외한 모든 쓰레드들의 작업을
	중단 후 사용하지 않는 메모리를 제거하고 작업이 재개된다.

객체지향의 설계원칙 5단계 (SOLID)
- 소프트웨어를 설계함에 있어 이해하기 쉽고, 유연하며, 유지보수 및 확장이 편하다는 장점이 있다.
1. SRP(Single Responsibility Principle) 단일 책임 원칙 : 한 클래스는 하나의 책임만 가져야 한다.
2. OCP(Open-Close Principle) 개방-폐쇄 원칙 : 수정에 대해서는 닫혀있어야 하고, 확장에는 열려 있어야 한다.
3. LSP(Liscov Substitution Principle) 리스코프 치환 원칙 : 하위 타입은 항상 상위 타입으로 대체할 수 있어야 한다.
							자식은 항상 부모를 대체
4. ISP(Interface segregation Principle) 인터페이스 분리 원칙 : 인터페이스 내에 메소드는 최소한일수록 좋다.
							(SRP와 같은 문제에 대한 두가지 다른 해결책이다.)
5. DIP(Dependency Inversion Principle) 의존관계 역전 원칙 : 구체적인 클래스보다 상위 클래스, 인터페이스, 추상클래스와 
							같이 변하지 않을 가능성이 높은 클래스와 관계를 맺어라.

자바의 메모리 영역
- 크게 Method영역, Stack영역, Heap영역으로 구분되고, 데이터 타입에 따라 할당됩니다.
	- Method영역 : 전역변수와 static변수를 저장하며, Method영역은 프로그램의 시작부터 종료까지 메모리에 남아있다.
	- Stack영역 : 지역변수와 매개변수 데이터 값이 저장되는 공간이며, 메소드가 호출될 때 메모리에 할당되고 종료되면 메모리가 해제된다.
		LIFO구조를 갖고 변수에 새로운 데이터가 할당되면 이전 데이터는 지워진다.
	- Heap영역 : new 키워드로 생성되는 객체(인스턴스), 배열 등이 Heap영역에 저장되며, 가비지 컬렉션에 의해 메모리가 관리된다.

- 각 메모리 영역이 할당되는 시점
	- Method영역 : JVM이 동작해서 클래스가 로딩될 때 생성.
	- Stack영역 : 런타임시 할당.
	- Heap영역 : 컴파일 타임 시 할당.
	- 컴파일 -> 런타임 -> JVM 동작

클래스와 객체
- 클래스는 객체를 만들어내기 위한 틀이라고 할 수 있고, 객체를 생성하는데 사용한다.
- 객체는 클래스를 기반으로 생성되며, 자신의 고유 이름과 필드, 메소드를 갖습니다.
- 객체에 메모리가 할당되어 실제로 활용되는 실체는 인스턴스 라고 부른다.

생성자
- 생성자는 클래스와 같은 이름의 메소드로, 객체가 생성될 때 호출되는 메소드이다.
- 명시적으로 생성자를 만들지 않아도 default로 만들어지며, 생성자는 파라미터를 다르게하여 오버로딩할 수 있습니다.

Synchronized
- 여러 개의 쓰레드가 한 개의 자원을 사용하고자 할 때, 현재 데이터를 사용하고 있는 쓰레드를 제외하고
나머지 쓰레드들은 데이터에 접근할 수 없게 막는 개념입니다.
- 데이터의 thread-safe를 하기 위해 자바에서 Synchronized 키워드를 제공해
멀티 쓰레드 환경에서 쓰레드간 동기화를 시켜 데이터의 thread-safe를 보장한다.
- thread-safe란
멀티 스레드 프로그래밍에서 일반적으로 어떤 함수나 변수, 혹은 객체가 여러 스레드로부터 동시에 접근이 이루어져도
프로그램의 실행에 문제가 없음을 뜻한다.

접근 제한자(Access Modifier)
- 변수 또는 메소드의 접근 범위를 설정해주기 위해서 사용하는 Java의 예약어를 의미하며, 총 4 가지 종류가 있습니다.
- public - 접근 제한이 없다. (같은 프로젝트 내 어디서든 사용 가능)
- protected - 해당 패키지 내, 다른 패키지에서 상속받아 자손 클래스에서 접근 가능하다.
- (default) - 해당 패키지 내에서만 접근 가능
- private - 해당 클래스에서만 접근 가능

static 
- static 키워드를 사용한 변수나 메소드는 클래스가 메모리에 올라갈 때 자동으로 생성되며 클래스 로딩이 끝나면 바로 사용할 수 있습니다.
즉, 인스턴스(객체) 생성 없이 바로 사용 가능합니다.
- 모든 객체가 메모리를 공유한다는 특징이 있고, GC 관리 영역 밖에 있기 때문에 프로그램이 종료될 때까지
메모리에 값이 유지된 채로 존재하게 됩니다.

직렬화 Serialize

- 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 시스템에서도 사용할 수 있도록 바이트(byte) 형태로 데이터 변환하는 기술이며,
반대로 직렬화된 바이트 형태의 데이터를 다시 객체로 변환하는 과정을 '역직렬화'라고 합니다. 
- JVM의 메모리에 상주(힙 or 스택)되어 있는 객체 데이터를 바이트 형태로 변환하는 기술





	
	 
