객체지향 분석 방법론

1. 럼바우 방법론 (OMT)
가장 일반적으로 사용되고 객체모델, 동적모델, 기능모델로 나누어 수행하는 방법.
모든 SW 구성 요소를 그래픽 표기법으로 활용하여 모델링하여 시스템 개발의 전 단계가 추상화, 캡슐화, 상속성 등 일관된 객체지향
개념이 적용되는 객체지향 개발 방법.
분석절차 : 객체 -> 동적 -> 기능

2. 부치 방법론
미시적 개발 프로세스와 거시적 개발 프로세스 모두 포함하여 사용.
클래스와 객체들 분석 및 식별하고 클래스 속성과 연산 정의
클래스와 객체 의미 식별, 클래스와 객체들 관계 식별, 클래스와 객체 구현

3. 코드와 요든 방법론
E-R 다이어그램 이용하여 객체의 행위를 모델링하며 객체식별, 구조 식별,
주체 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성.

4. 워프스-브록 방법론
분석과 설계 간 구분이 없어 설계 작업까지 연속적으로 수행

Pareto의 법칙
소프트 웨어 테스트에서 오류의 80퍼센트는 전체의 20퍼센트에서 발견된다

Brooks의 법칙
지연되는 프로젝트에 인력을 더 투입하면 오히려 더 늦어진다.

Paradox의 법칙
동일 테스트 케이스로 동일 테스트 반복 시 결함이 발견되지 않는 현상.

응집도 :
1. 모듈의 독립성을 나타내는 개념으로, 모듈 내부 구성요소 간 연관 정도
2. 정보 은닉 개념의 확장 개념으로 하나의 모듈은 하나의 기능을 수행한다.

응집도 순서 ( a < b )
우연적(coincidental) 논리적(Logical) 시간적(Temporal) 절차적(Procedural) 교환적(Communication) 순차적(Sequential) 기능적(Functional)


결합도 :
1. 모듈 내부가 아닌 외부의 모듈과의 연관도 또는 모듈 간의 상호 의존성을 나타내는 정도.

결합도 순서 ( a < b )
자료(Data) 스탬프(Stamp) 제어(control) 외부(External) 공통(Common) 내용(Content)

소프트웨어 생명주기 모델
1. 폭포수 모형

2. 프로토타입 모형
인터페이스 중점 개발이라 개발 중간에 요구사항의 변경에 용이
3. 나선형 모형

4. 애자일 모형

디자인패턴
생성 패턴
1. 추상 팩토리
2. 팩토리 메소드
3. 빌더
4. 프로토타입
5. 싱글톤

구조 패턴
1. 어댑터
2. 브리지
3. 컴포지트
4. 데코레이터
5. 퍼싸드
6. 플라이웨이트
7. 프록시

행위 패턴
1. 책임 연쇄
2. 커맨드
3. 인터프리터
4. 반복자
5. 중재자
6. 메멘토
7. 옵서버
8. 상태
9. 전략
10. 템플릿 메소드
11. 방문자
