자료구조의 분류
선형 구조
1. 배열 : 정적인 자료구조, 기억장소의 추가가 어렵고 메모리 낭비 발생, 반복적 데이터 처리에 적합. 동일한 이름의 변수 사용.
2. 스택 LIFO : 리스트의 한쪽 끝으로만 자료의 삽입, 삭제 작업이 이루어짐.
3. 큐 FIFO : 한 쪽에서는 삽입 작업, 다른 한쪽에서는 삭제 작업이 이루워짐.
4. 데크 : 리스트의 양쪽 끝에서 삽입과 삭제 작업 가능.
5. 선형리스트 = 연속 리스트(순차적), 연결 리스트(순차적 x)

비선형 구조
1. 트리
2. 그래프
방향 그래프 : 선에 방향이 있는 그래프로 n개의 정점으로 구성된 최대 간선 수는  n(n-1)
무방향 그래프 : 선에 방향이 없는 그래프로 n개의 정점으로 구성된 최대 간선 수는  n(n-1)/2

데이터베이스
공용 데이터 : 공동으로 소유하고 유지하는 자료
통합된 데이터 : 자료의 중복을 최대한 배제한 데이터의 모임
운영 데이터 : 고유한 업무를 수행하는 데 없어서는 안 될 자료
저장된 데이터 : 컴퓨터가 접근할 수 있는 저장 매체에 저장된 자료.

DBMS : 데이터베이스를 관리해주는 소프트웨어
정의 기능 : DDL (데이터를 정의하거나 변경 또는 삭제할때 사용) CREATE ALTER DROP RENAME COMMIT TRUNCATE
조작 기능 : DML (인터페이스 수단을 제공) SELECT INSERT UPDATE DELETE
제어 기능 : DCL (무결성, 보안, 권한, 병행 제어) REVOKE, GRANT

데이터 접속
SQL Mapping : 프로그래밍 코드 내 SQL을 직접 입력해 DBMS 데이터에 접속하는 기술 ex) JDBC, ODBC, Mybatis
ORM Object Relational Mapping : 객체와 관계형데이터베이스의 데이터를 연결하는 기술 ex) JPA,Hibernate,Django

트랜잭션
데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위.
한꺼번에 모두 수행되어야 할 일련의 연산들

COMMIT : 트랜잭션 처리가 정상적으로 종료되어 수행한 변경 내용을 DB에 반영하는 명령어.

ROLLBACK : 트랜잭션 처리가 비정상적으로 종료되어 행한 모든 변경 작업을 취소하고 이전 상태로 되돌리는 연산.

트랜잭션의 특성
1. 원자성 Atomicity: 트랜잭션 연산을 DB 모두에 반영 또는 반영하지 말아야 함. (All or Nothing) 
2. 일관성 Consistency : 트랜잭션이 실행을 성공적으로 완료할 시 일관성 있는 데이터베이스 상태를 유지.
3. 독립성 Isolation : 둘 이상 트랜잭션 동시 실행 시 한 개의 트랜잭션만 접근이 가능하여 간섭이 불가하다.
4. 영속성 Durability : 성공적으로 완료된 트랜잭션 결과는 영구적으로 반영.

프로시저(Procedure) : 호출을 통해 실행되어 미리 저장해 놓은 SQL작업 수행, 처리 결과는 한 개 이상의 값 혹은 반환 하지 않음.

트리거(Trigger) : 입력, 갱신, 삭제 등의 이벤트가 발생할 때마다 관련 작업을 자동 수행 (특정한 이벤트가 발생할때 자동으로 실행되는 것)

통합 개발 환경 (IDE Integrated Development Environment)
개발에 필요한 환경, 즉 에디터, 컴파일러, 디버거 등 다양한 툴을 하나의 인터페이스로 통합해 제공하는 것
ex ) 이클립스, 비주얼 스튜디오, 엑스코드, 안드로이드 스튜디오, IDEA

빌드 자동화 도구
소스 코드를 소프트웨어로 변환하는 과정에 필요한 전처리, 컴파일 등의 작업들을 수행하는 소프트웨어\
1. Ant : 아파치에서 개발한 소프트웨어, XML 기반, 자바 프로젝트 빌드 자동화 도구, 규칙이나 표준이 없어 개발자가 모든 것을 정의,
스크립트 재사용이 어려움.
2. Maven : Ant대용으로 만듬. 컴파일과 빌드를 동시에 수행 가능, 의존성(Dependency)을 설정하여 라이브러리 관리.
3. Gradle : Ant와 Maven을 보완해 개발됨, 안드로이드의 공식 빌드 도구, Dependency 사용, 다양한 언어 빌드 가능, 실행할 명령들을 모아 태스크를 만든 후 태스크 단위로 실행함. 빌드 캐시 기능 -> 빌드의 속도 향상.
4. Jenkins : JAVA기반의 오픈 소스 형태의 빌드 자동화 도구. 서블릿 컨테이너에서 실행, 대부분의 형상 관리 도구와 연동 가능.
친숙한 Web GUI 제공. 여러 대의 컴퓨터를 이용한 분산 빌드나 테스트 가능.

소프트웨어 패키지
모듈별로 생성한 실행 파일들을 묶어 배포용 설치 파일을 만드는 것. 개발자가 아닌 사용자 중심으로 진행.

패키징 작업 순서
기능 식별 -> 모듈화 -> 빌드 진행 -> 사용자 환경 분석 -> 패키징 적용 -> 패키징 변경 개선 -> 배포

소프트웨어 패키징 도구 활용시 고려사항
1. 사용자에게 배포되는 SW때문에 보안 고려
2. 사용자 편의성을 위해 복잡성 및 비효율성 문제 고려 
3. 제품 SW종류에 적합한 암호화 알고리즘 적용.
4. 다양한 이기종 연동 고려.

디지털 저작권 관리 DRM Digital Right Management
DRM의 흐름
1. 컨텐츠 제공자, 분배자, 소비자
2. 패키저
3. 클리어링 하우스
4. DRM 컨트롤러
5. 보안 컨테이너

DRM의 기술요소
1. 암호화
2. 키 관리
3. 식별기술
4. 저작권표현
5. 암호화 파일 생성
6. 정책 관리
7. 크랙 방지
8. 인증

소프트웨어 패키징의 형상 관리 SCM Software Configuration Management
형상관리 : 소프트웨어 개발 과정에서 소프트웨어의 변경 사항을 관리. 개발의 전 단계에 적용되는 활동, 유지보수 단계에서도 수행.

중요성
1. 소프트웨어의 변경 사항을 체계적으로 추적하고 통제할 수 있음
2. 소프트웨어에 대한 무절제한 변경 방지
3. 진행 정도를 확인하기 위한 기준.

기능
1. 형상 식별
2. 형상 통제
3. 형상 감사
4. 형상 기록
5. 버전 제어

등록 과정
가져오기 Import -> 인출 Check Out -> 예치 Commit -> 동기화 Update -> 차이 Diff

형상관리 역할
1. 이전 리비전이나 버전에 대한 정보에 접근 가능하여 배포본 관리에 유용
2. 불필요한 사용자의 소스 수정 제한
3. 동일 프로젝트에 대해 여러 개발자 동시 개발 가능

버전 관리 도구
