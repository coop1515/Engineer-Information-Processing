1. 프로젝트 발표 질의

<1조: 실시간 스트리밍 서비스 플랫폼>
- Project 선정 사유는 무엇인가?
- 개발 시 어려웠던 점
- 성능 문제: 접속자 수 대비 server가 얼마만큼 버틸 수 있을까?
- 동영상 업로드시 progress bar 넣을 것.
- 녹화 contents는 어디에 저장되는가?
- 방송 contents는 big data가 될 수 있는데 어떻게 관리할건지?
- 동영상 추천 기능: 데이터 분석을 기반으로 하는 추천 기능 필요
- 동영상 컨텐츠의 검색에 있어서 제목, 내용을 기준으로 검색할 수 있도록 개선 필요
- Project 시간이 좀 더 길었다면 보완할 기능이 있었는지? 무엇인지?
				
<2조: Cross platform 근태 관리 시스템>
- WiFi 부정 사용에 대한 대책
- React Native expo cli : CORS 정책 문제 해결
- 출석 및 외출 기능에 있어 관리자가 check해야 하는 부분은 무엇인가?
- 시간이 더 주어졌다면 추가로 구현했을 기능은?

<3조: 1.3	설문 조사 시스템>
- 설문 답을 안하고 넘어가는 경우, 필수 응답 또는 필수 응답이 아닌 경우, 질문 선후 관계가 있을 경우에 대한 구현 방안
- MongoDB 사용 이유
- RDB(MySQL)와 NoSQL(MongoDB) 구분 사용 이유
- 시간이 더 주어졌다면 추가로 구현했을 기능은? : 질문의 유형 확대. 꼬리 질문 기능

<4조: 병원 예약 시스템>
- Project 기획 의도
- 참조 site는 있었는가? 어떤 site 인가?
- 사용자가 왜 이 시스템을 사용해야 하는가?
- 예약 사항이 병원 거절일 경우 대책이 되는 기능은 무엇인가? : 안내 문자 등…
- 타 병원 예약 시스템과의 차별성은?
- 전체 기능 중 타 시스템과의 기술적 차별성은 무엇인가?
- Mobile version 개발 필요
- 시간이 더 주어졌다면 추가로 구현했을 기능은?

<5조: 유통기한 임박 상품 판매/구매 matching system>
- Component는 모두 typescript로 작성함
- 상품 검색, 정렬, 추천 기능 필요
- 3명의 팀원으로 개발하는데 어려움 없었는가?
- 상품화되었을 때 수익 모델은?
- 상품 유통기한이 지났을 때 발생가능한 위험성에 대한 대책은?
- Project idea 창출자는 누구인가?
- 유사 프로그램이 있는가?

<6조: 농장 관리 시스템>
- Project idea 창출자는 누구인가?
- Redis를 통한 Cache 사용 사유: 공공 API를 사용하는 경우
- Mobile version을 함께 만들지 않은 이유
- 개발 중 어려웠던 점: DB 설계(기능적 연계성이 많아 table의 join이 많이 일어남

<7조: 물류 관리 시스템>
- Project idea를 정한 이유는?
- BOM 관리는 어떤 방법으로 하는가?
- 인쇄 기능이 필요함
- 개발 과정 중 애로 사항
- 개발 기간이 짧아서 구현하지 못했던 기능은?

<추가 공통 질문들...>
- 같은 프로젝트를 한 다른 조와의 차별성

-----------------------------------------------------------
2. 최종 인터뷰 질문

<1.Database>
- DML, DDL, DCL
1. DML 데이터 조작어 : 테이블에 들어있는 데이터에 변형을 가하는 종류
select, insert, update, delete
2. DDL 데이터 정의어 : 데이터 구조를 정의하는데 사용되는 명령어들
create, alter drop, rename, truncate
3. DCL 데이터 제어어 : 데이터베이스에 접근하고 객체들을 사용하도록 권한을 주고 회수하는 명령어들

- MySQL scheduler : DB자체에 어떤 이벤트를 걸어주고
해당 이벤트가 주기적으로 반복되게끔 하는것 (주기적으로 DB에 작업을 해주는 것.)

- 무한 스크롤 시에 DB access 방안은? -> 스크롤이 끝날시점 혹은 그 바로 전에 
access 해준다.
무한스크롤 : 스크롤이 끝나면 다음 페이지를 불러와 보여주는 것

- DB trigger : 특정 테이블에 DML문이 수행되었을 때(특정 조건이 만족되면)
, DB에서 자동으로 동작하는 이벤트( 작업)

- Inner join, Outer join
- group by 연산 : 일반적으로 집계함수와 같이 사용되며 
소그룹에 대한 항목별로 통계 정보를 얻을 때 사용됩니다.

- 동시에 db access 할 때의 처리 방안

- join 할 때 주의해야 할 점 : 카테시안 곱(?)

- Sequence, Procedure, Function, Trigger, Index
  Sequence : 
  Procedure : 호출을 통해 실행되어 미리 저장해 놓은 SQL 작업 수행한다.
  Trigger : DCL을 사용할 수 없으며 DCL이 포함된 프로시저나 함수를 호출하는 경우에도 오류 발생
  Function :
  Index : 데이터 레코드를 빠르게 접근하기 위해 <키 값, 포인터> 쌍으로 구성된 데이터 구조.
  
- varchar와 char의 차이는 무엇인가? char는 고정형, varchar는 가변형.

- 데이터 베이스 정규화 정의 : 하나의 종속성이 하나의 릴레이션에 표현될 수 있도록 분해해가는 과정, 논리적 설계 단계에서 수행.

- 정규화의 목적
1. 데이터 구조의 안정성 및 무결성을 유지
2. 어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 만듦.
3. 효과적인 검색 알고리즘 생성 가능
4. 데이터 중복을 배제해 이상(Anomaly)의 발생 방지 및 자료 저장 공간의 최소화
5. 개체와 속성의 누락 여부 확인 가능
6. 데이터 삽입 시 릴레이션을 재구성할 필요성을 줄임.

<2.Frontend>
- React에서 code split의 개념
	
- React 구현 방법, 어떻게 적용했는지
- Functional programming과 Class programming과의 차이점
- Class 컴포넌트와 Functional component
- Restful
- 상태관리 라이브러리 사용했는지
- jwt 왜 사용했는지 
- session 어떻게 저장했는지 , JWT 사용했는지
- 프로젝트 UI 화면 왜 그렇게 설계했는지
- 데이터 베이스 설계 할 때 왜 그렇게 설계하고 PK를 그걸로 잡았는지
- 왜 MUI 사용했는지
- hash 라우터 왜 사용했는지
- webpack babel 에서 target 이 뭔지 

<3.Back-end>
- AOP와 DI정의
- Architecture 설계 및 구현 방법
- Spring의 장점과 주요 개념(DI, AOP)
- OOP의 개념
- 상속(extends)와 구현(implements)의 차이점
- Overloading과 Overriding의 차이점
- Process와 Thread의 차이점
- 동기/비동기 차이점
- Queue와 Stack의 차이점과 응용 사례
- Call by reference와 Call by value 비교 설명
- Array와 List(ArrayList LinkedList) 차이점
- 알고 있는 자료구조 알고리즘
- 인기 있는 Web 개발 framework, JavaScript framework(React, Vue 등…)
- SSR(Server Side Rendering), CSR(Client Side Rendering) 차이점
- MSA(Micro Service Architecture) 개념
- 프레임워크랑 라이브러리 차이
- 프레임워크 장점
- 스프링 프레임워크 특징이나 기능 아는대로 설명
- ORM이 뭔지? JPA 설명
- jpa 장단점
- 대용량데이터 사용시 jpa에서 특정데이터만 가져올때 기본 함수에 원하는 명령어가 없을때 어떻게 해야하는지
- 개발해보면서 트러블슈팅 가장 오래걸렸던 기간
- 왜 Node.js를 사용했는지
- NODE.JS의 장점과 단점
- Soket의 작동 원리
- 프로젝트에서 DB 연결과정
- 세션과 쿠키 차이점
- Http 프로토콜에 대해 아는지
- 클라이언트와 서버가 무엇인가
- stomp 와 soket.io 차이점이 뭔지와 어떤게 더 편했는지


<4.인성>
- 30초 동안 자기 소개: 자신 있는 자기 장점 appeal
- 부서 지원 이유
- 장단기 개발 목표
- 10년 후 자신의 모습은?
- Project 시에 어려웠던 점
- 당신이 고객이라면 이 시스템을 쓰겠느냐?
- 직무 선택 이유
- 서울, 강촌, 해외 근무 가능한지?
- DB 설계는 누가 했는지?
- 자신이 맡은 구현 기능 설명하기
- 자신의 롤모델을 두 사람 들고 누구이며 왜 그런가?
- 개발자에게 중요하다고 생각하는 덕목?
- 프로젝트하면서 힘들었던 점


fetch와 axios 
axois를 사용한 이유 : fetch는 구버전 브라우저를 지원하지 않음.
fetch보다 axios가 통신시에 편리함.

Bcrypt 암호화
 먼저 복호화가 가능한지에 따라 양방향 / 단방향으로 구분되고,
복호화할 때 사용하는 비밀키가 암호화할 때 그대로 사용되면 대칭키, 서로 다른 키를 사용하면 비대칭키가 된다. 
BCrypt 알고리즘은 SHA 알고리즘과 마찬가지로 복호화 불가능하기 때문에 단반향 알고리즘이다. 
현재 사용되는 해시 알고리즘 중 가장 강력한 암호화 방식이다. 따라서 Spring security에서 채택하고 사용한다.
추가적으로 2^4~2^31 회의 반복 횟수를 설정할 수 있어서 처리되는 시간을 임의로 늘릴 수 있다.
이로 인해 무차별적인 대입을 통한 해킹 방식을 방어할 수도 있다. 
컴퓨팅 성능이 늘어나도 반복하는 횟수를 늘림으로서 대처가 가능하므로 지속적으로 사용하기 좋은 암호화 방식이다.  
참고로 BCrypt 알고리즘은 SHA 알고리즘과 다르게 동일한 평문도 매번 다른 해시값으로 나타나므로
단순하게 비교하는 방식으로는 값의 동등성을 확인할 수 없다.
