# 데이터베이스 구축

DB 설계 시 고려사항
무결성, 일관성, 회복, 보안, 효율성, DB 확장

설계 순서
요구 조건 분석 -> 개념적 설계 -> 논리적 설계 -> 물리적 설계 -> 구현
1. 요구 조건 분석 : 요구 조건 명세서 작성
2. 개념적 설계 (정보 모델링, 개념화) : 독립적인 개념 스키마 모델링, 트랜잭션 모델링 ex) E-R 다이어그램 모델
3. 논리적 설계 (데이터 모델링) : 목표 DBMS에 맞는 (종속적인) 논리 스키마 설계 ex) RDB
4. 물리적 설계 (데이터 구조화) : 목표 DBMS에 맞는 (종속적인) 물리적 구조의 데이터로 변환 ex)저장 레코드, 접근 경로 설계
5. 구현 : 목표 DBMS의 DDL로 데이터베이스 생성, 트랜잭션 작성

데이터 모델의 구성 요소
1. 개체 Entity : 사람이 생각하는 개념이나 정보 단위 같은 현실 세계의 대상체
2. 속성 Attribute : 데이터의 가장 작은 논리적 단위로 데이터 항목 및 데이터 필드에 해당
3. 관계 Realationship : 개체 간의 관계 또는 속성 간의 논리적인 연결을 의미

데이터 개념적 모델 : 이해를 돕기 위해 추상적 개념으로 표현하는 과정 ex) E-R 모델

논리적 데이터 모델 : 개념적 모델링 과정에서 얻은 개념적 구조를 컴퓨터가 이해할 수 있도록 컴퓨터 환경에 맞도록 변환하는 과정
일반적으로 데이터 모델이라 하면 논리적 데이터 모델을 의미 ex) 관계 모델, 계층 모델, 네트워크 모델

데이터 모델에 표시할 요소
1. 구조 Structure : 논리적인 개체 타입들 간의 관계, 데이터 구조 및 정적 성질을 표현
2. 연산 Operation : 실제 데이터를 처리하는 작업에 대한 명세로, 조작하는 기본 도구
3. 제약 조건 Constraint : DB에 저장될 수 있는 실제 데이터의 논리적인 제약 조건

개체의 정의 및 특징
실세계에 독립적으로 존재하는 유형, 무형의 정보로 서로 연관된 몇개의 속성으로 구성됨, 사람이 생각하는 개념이나 정보 단위같은 대상체
독립적으로 존재하거나 그 자체로서도 구별 가능, 유일한 식별자

개체 선정 방법
담당자와 인터뷰, 장부와 전표 이용, 자료흐름도, 자료 저장소 이용, BPR (Business Process Reengineering 업무 프로세스 재설계) 에 의해 업무를 재정의한 경우 관련 개체를 찾음.

개체명 지정 방법
업무에서 사용하는 용어, 약어 사용은 되도록 제한, 가능하면 단수명사 사용,
모든 개체명은 유일해야함, 개체가 생성되는 의미에 따라 이름 부여

속성의 정의 및 특징
1. DB를 구성하는 가장 작은 논리적 단위
2. 데이터 항목 또는 데이터 필드
3. 개체를 구성하는 항목 및 개체의 특성을 기술
4. 속성의 수를 Degree 차수 라고 함(열). => Tuple의 수는 cardinality (행)

속성의 특성에 따른 분류
1. 기본 속성 : 업무 분석을 통해 정의한 속성 ex) 자동차명, 제조일, 연비
2. 설계 속성 : 원래 업무상 존재하지 않고 설계 과정에서 도출해낸 속성 ex) 자동차 코드
3. 파생 속성 : 다른 속성으로부터 영향을 받아 발생하는 속성 ex) 계산 값

속성명 지정 원칙
업무에서 사용하는 용어, 서술형 X, 약어 사용 제한, 개체명 사용 불가, 유일하게 식별 가능하도록 지정.

관계의 형태
1:1 : A 집합의 원소가 B 집합의 원소 한개와 대응하는 관계 
1:N : A 집합의 원소 하나가 B 집합의 원소 여러개와 대응하는 관계
N:N : A 집합의 원소 여러개가 B 집합의 원소 여러개와 대응하는 관계

관계의 종류
종속 관계, 중복 관계, 재귀 관계, 배타 관계

식별자
하나의 개체 내에서 각각의 인스턴스를 유일하게 구분할 수 있는 구분자
모든 개체는 한 개 이상의 식별자를 반드시 가져야 함.

관계형 데이터베이스의 구조
1. 튜플, 행, 레코드
속성의 모임으로 구성되고 파일 구조상 레코드(실제 데이터)와 같은 의미
튜플의 수는 카디널리티의 수 또는 기수, 대응수

2. 속성, 열, 필드
DB를 구성하는 가장 작은 논리적 단위, 파일 구조상의 데이터 항목 또는 데이터 필드에 해당, 개체의 특성을 기술
속성의 수 = Degree (차수)

도메인 : 하나의 속성이 가질 수 있는 같은 타입 원자값들의 집합

릴레이션의 특징
1. 한 릴레이션(테이블)에 포함된 튜플(행)들은 모두 상이하고 튜플들 사이에는 순서가 없다.
2. 릴레이션 스키마를 구성하는 속성(열) 간의 순서는 중요하지 않음.
3. 속성은 논리적으로 더 이상 쪼갤 수 없는 원자 값으로 저장한다.
4. 각 속성은 식별을 위해 릴레이션 내에서 유일한 이름을 가진다. 그러나 그에 해당하는 도메인(속성을 구성하는 값)에는 동일한 값이 있을 수 있다.

키
1. 후보키 Candidate Key
릴레이션에 있는 모든 튜플에 대해 유일성과 최소성을 만족시켜야 함.
모든 릴레이션에는 반드시 하나 이상의 후보키가 존재.
유일성 : 하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야함.
최소성 : 모든 레코드들을 유일하게 식별하는 데 꼭 필요한 속성으로만 구성되어야 함.

2. 기본키 Primary Key
중복된 값과 NULL값을 가질 수 없음. 유일성과 최소성을 가지며 튜플을 식별하기 위해 반드시 필요한 키

3. 대체키 Alternate Key
후보키가 둘 이상일때 기본키를 제외한 나머지 후보키를 의미

4. 슈퍼키 Super Key
한 릴레이션 내에 있는 속성들의 집합으로 구성된 키. 모든 튜플에 대해 유일성은 만족시키지만, 최소성은 만족시키지 못함.

5. 외래키 Foreign Key
다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합, 참조되는 릴레이션의 기본키와 대응 되어 릴레이션 간의 참조 관계를 표현한다.

무결성
1. 개체 무결성 Entity Integrity, 실체 무결성
테이블의 기본키를 구성하는 어떤 속성도 Null값이나 중복값을 가질 수 없다.
기본키의 속성 값이 Null값이 아닌 원자 값을 갖는 성질

2. 도메인 무결성
릴레이션 내의 튜플들이 각 속성의 도메인에 지정된 값 만을 가져야함.

3. 참조 무결성
외래키 값은 NULL이거나 참조 릴레이션의 기본키의 값과 동일해야 한다.
릴레이션은 참조할 수 없는 외래키 값을 가질수 없다는 규정

4. 사용자 정의 무결성
속성 값들이 사용자가 정의한 제약 조건에 만족해야 함.

5. 데이터 무결성 강화
어플리케이션 : 데이터 생성, 수정, 삭제 시 무결성 조건을 검증하는 코드를 데이터를 조작하는 프로그램 내에 추가
데이터베이스 트리거 : 트리거 이벤트에 무결성 조건을 실행하는 절차형 SQL을 추가
제약 조건 : 데이터베이스에 제약 조건을 설정해 무결성을 유지

관계 대수
관계형 DB에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어
1. Select σ
2. Project π
3. Join ⋈
4. Division ÷

정규화 Normalization, 반정규화 Denormalization
하나의 종속성이 하나의 릴레이션에 표현될 수 있도록 분해해가는 과정, 논리적 설계 단계에서 수행.

정규화의 목적
1. 데이터 구조의 안정성 및 무결성을 유지
2. 어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 만듦.
3. 효과적인 검색 알고리즘 생성 가능
4. 데이터 중복을 배제해 이상(Anomaly)의 발생 방지 및 자료 저장 공간의 최소화
5. 개체와 속성의 누락 여부 확인 가능
6. 데이터 삽입 시 릴레이션을 재구성할 필요성을 줄임.

이상(Anomaly)의 개념 및 종류
정규화를 거치지 않아 데이터베이스 내에 데이터들이 불필요하게 중복되어 릴레이션 조작 시 예기치 못하게 발생하는 곤란한 현상
1. 삽입 이상 : 릴레이션에 데이터를 삽일할 때 의도와 상관없이 원하지 않은 값들도 함께 삽입되는 현상
2. 삭제 이상 : 릴레이션에서 한 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상
3. 갱신 이상 : 릴레이션에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 모순이 생기는 현상

정규화의 원칙
정보의 무손실, 분리의 원칙, 데이터의 중복성 감소

정규화 과정
1NF 릴레이션에 속한 모든 도메인이 원자값만으로 이루어진 정규형
2NF 릴레이션이 1NF고, 기본키가 아닌 모든 속성이 기본키에 대해 완전 함수적 종속을 만족하는, 부분적 함수 종속을 제거한 정규형
3NF 릴레이션이 2NF고, 기본키가 아닌 모든 속성이 기본키에 대해 이행적 함수 종속 관계를 만족하지 않는 정규형
BCNF 릴레이션에서 모든 결정자가 후보키인 정규형, 모든 BCNF가 종속성을 보존하는 것은 아니다.
4NF 릴레이션에서 다치 종속이 성립하는 경우
5NF 릴레이션에서 모든 조인 종속이 릴레이션의 후보키를 통해서만 성립되는 정규형

반정규화의 개념
시스템의 성능 향상, 개발 및 운영의 편의성 등을 위해 정규화된 데이터 모델을 통합, 중복, 분리하는 과정으로 의도적으로 정규화 원칙을 위배하는 행위 그러나 데이터의 일관성 및 정합성이 저하될 수 있다.

반정규화의 방법
1. 테이블 통합
2. 테이블 분할
3. 중복 테이블 추가
4. 중복 속성 추가

시스템 카탈로그
사용자를 포함해 DBMS에서 지원하는 모든 데이터 객체에 대한 정의나 명세에 관한 정보를 유지 관리하는 시스템 테이블
좁은 의미로는 카탈로그를 데이터 사전(Data Dictionary) 이라고 하고 저장된 정보를 메타 데이터(Meta Data) 라고함.

카탈로그의 특징
일반 이용자도 SQL을 이용해 내용을 검색할 수 있다.
INSERT, DELETE, UPDATE문으로 카탈로그를 갱신 할 수 없다.
DBMS에 따라 상이한 구조를 갖는다.
카탈로그는 DBMS가 스스로 생성하고 유지한다.
사용자가 SQL문을 실행시켜 변화를 주면 시스템이 자동으로 갱신한다.

DB 저장공간 설계
1. 테이블 : DB의 가장 기본적인 객체로 행(Row,튜플)과 열(Column,속성)으로 구성, 개체(Entity)와 대응하는 객체
2. 클러스터드 인덱스 테이블 : 기본키나 인덱스키의 순서에 따라 데이터가 저장되는 테이블, 일반적인 테이블에 비해 접근 경로가 단축됨.
3. 파티셔닝 테이블 : 대용량의 테이블을 작은 논리적 단위인 파티션으로 나눈 테이블, 파티션 키를 잘못 구성하면 역효과 초래
레인지 파티셔닝 : 지정한 열의 값을 기준으로 분할 (범위 분할)
해시 파티셔닝 : 해시 함수에 따라 데이터 분할 (해시 분할)
리스트 파티셔닝 : 미리 정해진 그룹핑 기준에 따라 분할
컴포지트 파티셔닝 : 레인지 파티셔닝 이후 해시 함수를 적용 (조합 분할) ex) 범위분할 + 해시분할

파티션의 장점 : 성능 향상, 가용성 향상, 백업 가능, 경합 감소

CRUD 매트릭스
C > D > U > R 순으로 우선순위 적용.

인덱스 : 데이터 레코드를 빠르게 접근하기 위해 <키 값, 포인터> 쌍으로 구성된 데이터 구조.

인덱스의 종류
1. 클러스터드 인덱스 / 넌클러스터드 인덱스
2. 트리 기반 인덱스
3. 비트맵 인덱스
4. 함수 기반 인덱스
5. 비트맵 조인 인덱스
6. 도메인 인덱스

뷰 View
기본 테이블로부터 유도된, 이름을 가지는 가상 테이블로 물리적으로 구현되어 있지 않지만 저장장치 내에 논리적으로 존재.
정의된 뷰로 다른 뷰를 정의할 수 있다. 대신 뷰가 정의된 기본 테이블이나 뷰를 삭제하면 다른 뷰들도 자동으로 삭제됨.
속성 : REPLACE, FORCE, NOFORCE, WITH CHECK OPTION, WITH READ ONLY

뷰의 장점
논리적 데이터 독립성 제공, 접근 제어를 통한 자동 보안 제공, 사용자 데이터 관리 용이

뷰의 단점
독립적인 인덱스를 가질수 없다. 뷰의 정의를 ALTER로 변경할 수 없음 -> DROP하고 새로 CREATE해야함.
뷰로 구성된 내용에 대한 삽입, 삭제, 갱신, 연산에 제약이 따름.

분산 데이터베이스
논리적으로 하나의 시스템에 속하지만 물리적으로는 네트워크를 통해 연결된 여러 개의 컴퓨터에 분산되어 있는 데이터베이스

구성 요소
1. 분산 처리기 : 자체적으로 처리 능력을 가지며, 지리적으로 분산되어 있는 컴퓨터 시스템.
2. 분산 데이터베이스 : 지리적으로 분산되어 있는 데이터베이스, 해당 지역의 특성에 맞게 구성된 데이터 베이스
3. 통신 네트워크 : 분산 처리기들을 통신망으로 연결해 논리적으로 하나의 시스템처럼 작동할 수 있도록 하는 통신 네트워크

목표
1. 위치 투명성 : DB의 실제 위치를 알 필요 없이 논리적인 명칭만으로 액세스 가능
2. 중복 투명성 : 동일 데이터가 여러곳에 중복되어 있더라도 사용자는 마치 하나의 데이터만 존재하는 것처럼 사용
3. 병행 투명성 : 다수의 트랜잭션들이 동시에 실현되더라도 그 트랜잭션의 결과는 영향을 받지 않음.
4. 분할 투명성 : 하나의 논리적 릴레이션이 여러 단편으로 분할되어 여러 시스템에 저장되어 있음을 인식할 필요가 없음.
5. 장애 투명성 : 트랜잭션, DBMS, 네트워크, 컴퓨터 장애가 발생해도 트랜잭션을 정확하게 처리하고 데이터 무결성을 보장함.

분산 DB 설계 : 어플리케이션이나 사용자가 분산되어 저장된 데이터에 접근하게 하는 것이 목적
설계 방법
1. 테이블 위치 분산 : 테이블을 각기 다른 서버에 분산시켜 배치하는 방법
2. 분할 : 테이블의 데이터를 분할하여 분산시키는 것
3. 할당 : 동일한 분할을 여러 개의 서버에 생성하는 방법 ( 중복있는 할당, 없는 할당)

데이터베이스 보안 Security
권한이 없는 사용자가 액세스하는 것을 금지하기 위한 기술

암호화 Encryption 과정
암호화 되지 않은 평문을 정보보호를 위해 암호문으로 바꾸는 과정 ex) 개인키 암호 방식(대칭키), 공개키 암호 방식(비대칭키)

복호화 Decryption 과정
암호문을 원래의 평문으로 바꾸는 과정

암호화 방식
1. 개인키 암호 방식 : 동일한 키로 데이터를 암호화하고 복호화 함. 비밀키는 DB 사용 권한이 있는 사용자만 나눠 가짐.
종류 : DES, AES, SEED, ARIA

2. 공개키 암호 방식 : 데이터를 암호화할 때 사용하는 키(공개키)는 DB 사용자에게 공개하고, 복호화할 때의 키(비밀키)는 관리자가 관리하는 방법
종류: RSA

접근통제
데이터가 저장된 객체와 이를 사용하려는 주체 사이의 정보 흐름을 제한하는 것.
3요소 : 접근통제 정책, 접근통제 보안모델, 접근통제 매커니즘

임의 접근통제 DAC Discretionary Access Control : 데이터에 접근하는 사용자의 신원에 따라 접근 권한 부여 ex)접근통제 권한 = 주체
강제 접근통제 MAC Mandatory Access Control : 주체와 객체의 등급을 비교해 접근 권한 부여 ex) 접근통제 권한 = 제3자

SQL의 분류
DDL Data Define Language: 도메인, 스키마, 테이블, 뷰, 인덱스를 정의하거나 변경 또는 삭제할 때 사용하는 언어
ex) CREATE, ALTER, DROP
DML Data Manipulation Language: SELECT, INSERT, DELETE, UPDATE
DCL Data Control Langauge: REVOKE, GRANT, ROLLBACK, COMMIT

윈도우 함수 : GROUP BY절을 이용하지 않고 속성의 값을 집계할 함수를 기술함.
함수의 인수로 지정한 속성이 대상 레코드의 범위가 되는데, 이를 WINDOW라 함.
ROW NUMBER() : WINDOW별로 각 레코드에 대한 일련 번호를 반환함 ex) 1,2,3,4,5
RANK() : WINDOW별로 순위를 반환하며, 공동 순위를 반영함 ex) 1,1,1,4,5
DENSE_RANK() : WINDOW별로 순위를 반환하며 공동 순위를 무시하고 순위를 부여함 ex) 1,1,1,2,3

조인
결합을 의미하며, 관계형 데이터베이스에서의 조인은 교집합 결과를 가지는 결합 방법을 의미.

논리적 조인
1. 내부 조인
동등 조인 EQUI JOIN : 공통 존재 컬럼의 값이 같은 경우 추출
자연 조인 NATURAL JOIN : 두 테이블의 모든 컬럼을 비교해 같은 컬럼 명을 가진 값이 같은 경우 추출
교차 조인 CROSS JOIN : 조인 조건이 없는 모든 데이터 조합 추출

2. 외부조인
왼쪽 외부 조인 LEFT OUTER JOIN : 왼쪽 테이블의 모든 데이터와 오른쪽 동일 데이터 추출
오른쪽 외부 조인 RIGHT OUTER JOIN : 오른쪽 테이블의 모든 데이터와 왼쪽 동일 데이터 추출
완전 외부 조인 FULL OUTER JOIN : 양쪽의 모든 데이터 추출

물리적 조인
1. 중첩 반복 조인 Nested-Loop-JOIN : 2개 이상의 테이블에서 하나의 집합을 기준으로 순차적으로 상대방 ROW를 결합해 원하는 결과를 조합하는 방식
2. 정렬 합병 조인 SORT-MERGE JOIN : 양쪽 테이블의 정렬한 결과를 차례로 검색하면서 연결고리 형태로 합병하는 방식
3. 해시 조인 HASH JOIN : 해싱 함수 기법을 활용하여 조인을 수행하는 방식

절차형 SQL
프로그래밍 언어와 같이 연속적인 실행이나 분기, 반복 등의 제어가 가능한 SQL
프로그래밍 언어에 비해 효율이 떨어지지만 연속적인 처리 가능, BEGIN ~ END 형식으로 작성되는 블록 구조로 기능별 모듈화 가능

1. 프로시저 : 호출을 통해 실행되어 미리 저장해 놓은 SQL 작업 수행
DECLARE(필수) BEGIN(필수) CONTROL SQL EXCEPTION TRANSACTION END(필수)

2. 트리거 : DCL을 사용할 수 없으며 DCL이 포함된 프로시저나 함수를 호출하는 경우에도 오류 발생
DECLARE(필수) EVENT(필수) BEGIN(필수) CONTROL SQL EXCEPTION END(필수)

3. 사용자 정의 함수 : INSERT,DELETE,UPDATE로 테이블 조작 불가, SELECT로 조회만 가능. 프로시저를 호출해 사용 못함.
DECLARE(필수) BEGIN(필수) CONTROL SQL EXCEPTION RETURN(필수) END(필수)

정적 SQL vs 동적
1. SQL 구성 : 커서를 통한 정적 처리 VS 문자열(String) 변수에 담아 동적 처리
2. 개발 패턴 : 커서의 범위 안에서 반복문을 활용해 SQL작성 VS NVL 함수를 사용할 필요없이 로직을 통해 SQL 작성
3. 실행 속도 : 빠름 VS 느림
4. 사전 검사 : 가능 VS 불가능 -> SQL 변형 위험

ORM Object-Relational Mapping
객체와 관계형데이터베이스의 데이터를 연결하는 기술
ORM으로 생성된 가상의 객체지향 데이터베이스는 독립적이므로 재사용 및 유지보수 용이하고 직관적이고 간단하게 데이터 조작 가능
